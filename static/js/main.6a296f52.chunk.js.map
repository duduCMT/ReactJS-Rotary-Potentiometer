{"version":3,"sources":["components/RotaryPotentiometer/assets/Body.svg","components/RotaryPotentiometer/assets/Knop.svg","components/RotaryPotentiometer/RemapRange.js","components/RotaryPotentiometer/RotaryPotentiometer.jsx","components/RotaryPotentiometer/CalcPosition.js","App.js","index.js"],"names":["mapRange","low1","high1","low2","high2","value","Knop","styled","img","attrs","rotation","style","transform","fistAnglePosition","oldAngle","RotaryPotentiometer","onChange","minValue","maxValue","useState","setRotation","knopElement","useRef","changeAngleRotation","clientX","clientY","knopCenter","element","getBoundingClientRect","left","top","x","width","y","height","getCenter","current","angle","Math","atan2","PI","useEffect","realAngle","parseInt","convertedToRealAngle","className","onMouseMove","event","buttons","onTouchMove","targetTouches","src","bodyImg","alt","knopImg","ref","App","tensao","setTensao","setAngle","obj","toFixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAe,MAA0B,iCCA1B,MAA0B,iCCAlC,SAASA,EAASC,EAAMC,EAAOC,EAAMC,EAAOC,GACjD,OAAOF,GAAQC,EAAQD,IAASE,EAAQJ,IAASC,EAAQD,G,mBCQrDK,EAAOC,IAAOC,IAAIC,OAAM,gBAAGC,EAAH,EAAGA,SAAH,MAAmB,CAC/CC,MAAO,CACLC,UAAU,UAAD,OAAYF,EAAZ,YAFAH,CAAH,4BAOJM,EAAoB,IAEtBC,EAAWD,EAER,SAASE,EAAT,GAAgE,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACxD,EAAgCC,mBAASN,GAAzC,mBAAOH,EAAP,KAAiBU,EAAjB,KACMC,EAAcC,iBAAO,MAgD3B,SAASC,EAAoBC,EAASC,GACpC,IAAIC,ECvED,SAAmBC,GACxB,MAAqCA,EAAQC,wBAArCC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IACd,MAAO,CAAEC,EAAGF,EADZ,EAAmBG,MACQ,EAAGC,EAAGH,EADjC,EAA0BI,OACsB,GDqE7BC,CAAUd,EAAYe,SACjCC,EAASC,KAAKC,MAAMd,EAAUC,EAAWO,EAAGT,EAAUE,EAAWK,IAAM,IAAMO,KAAKE,KAEnFH,GAASxB,GAAqBwB,EAAQ,KAASA,GAzD9B,IAyD4DA,GAAS,OACzFvB,EAAWuB,EACXjB,EAAYiB,IAIhB,OAvCAI,qBAAU,WACR,IACIC,EAlBN,SAA8BL,GAC5B,OAAIvB,GAAYD,GAAqBC,EAAW,IACvC6B,SACL3C,EACEa,EAAmB,IAAK,EAAG,GAAIwB,IAG1BvB,GAfW,IAesBA,EAAW,IAC9C6B,SACL3C,GACG,IAlBe,GAkBS,GAAI,IAAKqC,SAHjC,EAWSO,CAAqB9B,GACjCT,EAAQL,EAAS,EAAG,IAAKiB,EAAUC,EAAUwB,GAK/C1B,EAHE0B,EAAY,EAGL,CAAEL,MAFH,EAEUK,YAAWrC,MAD7BA,EAAQY,GAECyB,EAAY,IAGZ,CAAEL,MAFH,IAEUK,YAAWrC,MAD7BA,EAAQa,GAIC,CAAEmB,MADHK,EACUA,YAAWrC,YAE9B,CAACK,EAAUM,EAAUC,EAAUC,IAuBhC,sBACE2B,UAAU,gBACVC,YAvBJ,SAAkCC,GACV,IAAlBA,EAAMC,SACRzB,EAAoBwB,EAAMvB,QAASuB,EAAMtB,UAsBzCwB,YAlBJ,SAAkCF,GAChCxB,EAAoBwB,EAAMG,cAAc,GAAG1B,QAASuB,EAAMG,cAAc,GAAGzB,UAc3E,UAKE,qBAAK0B,IAAKC,EAASC,IAAI,KACvB,cAAC,EAAD,CAAM3C,SAAUA,EAAUyC,IAAKG,EAASC,IAAKlC,O,MEhEpCmC,MAnBf,WACE,MAA4BrC,mBAAS,GAArC,mBAAOsC,EAAP,KAAeC,EAAf,KACA,EAA0BvC,mBAAS,GAAnC,mBAAOkB,EAAP,KAAcsB,EAAd,KAEA,OACE,sBAAKd,UAAU,YAAf,UACE,cAAC9B,EAAD,CACEE,SAAU,EACVC,SAAU,EACVF,SAAU,SAAC4C,GACTF,EAAUE,EAAIvD,MAAMwD,QAAQ,IAC5BF,EAASC,EAAIvB,UAEjB,+BAAKoB,EAAL,OACA,+BAAKpB,EAAL,cCdNyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6a296f52.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Body.7fed0364.svg\";","export default __webpack_public_path__ + \"static/media/Knop.e243b811.svg\";","export function mapRange(low1, high1, low2, high2, value) {\n  return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n}","import { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components';\nimport bodyImg from './assets/Body.svg'\nimport knopImg from './assets/Knop.svg'\nimport { mapRange } from './RemapRange';\nimport { getCenter } from './CalcPosition';\n\nimport './styles/potentiometer.css'\n\nconst Knop = styled.img.attrs(({ rotation }) => ({\n  style: {\n    transform: `rotate(${rotation}deg)`\n  }\n}))`\n`\n\nconst fistAnglePosition = 140;\nconst lastAnglePosition = 40;\nlet oldAngle = fistAnglePosition;\n\nexport function RotaryPotentiometer({ onChange, minValue, maxValue }) {\n  const [rotation, setRotation] = useState(fistAnglePosition);\n  const knopElement = useRef(null);\n\n\n  function convertedToRealAngle(angle) {\n    if (oldAngle >= fistAnglePosition && oldAngle < 180) {\n      return parseInt(\n        mapRange(\n          fistAnglePosition, 180, 0, 40, angle\n        )\n      );\n    } else if (oldAngle <= lastAnglePosition && oldAngle < 180) {\n      return parseInt(\n        mapRange(\n          -180, lastAnglePosition, 40, 260, angle\n        )\n      );\n    }\n  }\n\n  useEffect(() => {\n    let angle;\n    let realAngle = convertedToRealAngle(oldAngle);\n    let value = mapRange(0, 260, minValue, maxValue, realAngle);\n\n    if (realAngle < 5) {\n      angle = 0;\n      value = minValue;\n      onChange({ angle, realAngle, value });\n    } else if (realAngle > 255) {\n      angle = 260;\n      value = maxValue;\n      onChange({ angle, realAngle, value });\n    } else {\n      angle = realAngle;\n      onChange({ angle, realAngle, value });\n    }\n  }, [rotation, onChange, minValue, maxValue])\n\n  function onMouseMovePotentiometer(event) {\n    if (event.buttons === 1) {\n      changeAngleRotation(event.clientX, event.clientY);  \n    }\n  }\n\n  function onTouchMovePotentiometer(event){\n    changeAngleRotation(event.targetTouches[0].clientX, event.targetTouches[0].clientY);\n  }\n  \n  function changeAngleRotation(clientX, clientY){\n    let knopCenter = getCenter(knopElement.current);\n    const angle = (Math.atan2(clientY - knopCenter.y, clientX - knopCenter.x) * (180 / Math.PI));\n\n    if ((angle >= fistAnglePosition && angle < 180) || (angle <= lastAnglePosition && angle > -180)) {\n      oldAngle = angle\n      setRotation(angle)\n    }\n  }\n\n  return (\n    <div\n      className=\"potentiometer\"\n      onMouseMove={onMouseMovePotentiometer}\n      onTouchMove={onTouchMovePotentiometer}\n    >\n      <img src={bodyImg} alt=\"\" />\n      <Knop rotation={rotation} src={knopImg} ref={knopElement} />\n    </div>\n  )\n}","export function getCenter(element) {\n  const { left, top, width, height } = element.getBoundingClientRect();\n  return { x: left + width / 2, y: top + height / 2 }\n}\n","import { useState } from \"react\";\nimport { RotaryPotentiometer } from \"./components/RotaryPotentiometer/RotaryPotentiometer\";\nimport './styles/app.css'\n\nfunction App() {\n  const [tensao, setTensao] = useState(0.0);\n  const [angle, setAngle] = useState(0);\n\n  return (\n    <div className=\"container\">\n      <RotaryPotentiometer\n        minValue={0.0}\n        maxValue={5.0}\n        onChange={(obj) => {\n          setTensao(obj.value.toFixed(2))\n          setAngle(obj.angle)\n        }} />\n      <h1>{tensao}v</h1>\n      <h1>{angle}Â°</h1>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}